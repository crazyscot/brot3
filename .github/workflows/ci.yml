name: CI

on:
  push:
  workflow_dispatch:

permissions: {}

env:
  CARGO_TERM_COLOR: always
  CLICOLOR_FORCE: 1
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  BROT3_RUST_VERSION: nightly-2025-06-30
  # BROT3_RUST_VERSION should match the version in rust-toolchain.toml & across all workflows

jobs:
  build:
    uses: ./.github/workflows/build.yml
    with:
      release_workflow: false

  cargo-deny:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources
    # Prevent sudden announcement of a new advisory from failing ci:
    continue-on-error: ${{ matrix.checks == 'advisories' }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: cargo deny
        uses: EmbarkStudios/cargo-deny-action@f2ba7abc2abebaf185c833c3961145a3c275caad # 2.0.13
        with:
          command: check ${{ matrix.checks }}
          rust-version: "1.85.0" # this is the version in the cargo-deny-action container image

  cargo-fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: cargo fmt (stable toolchain)
        run: cargo +stable fmt --all -- --check

  coverage:
    name: coverage (shader)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Set minimal profile # no fmt or clippy
        run: rustup set profile minimal
      - uses: actions/checkout@v5
      - name: Install Rust
        uses: dtolnay/rust-toolchain@6d653acede28d24f02e3cd41383119e8b1b35921 # 2025-09-17
        with:
          toolchain: ${{ env.BROT3_RUST_VERSION }}
          components: llvm-tools-preview
      - uses: taiki-e/install-action@33734a118689b0b418824fb78ea2bf18e970b43b # v2.50.4
        with:
          tool: cargo-llvm-cov
          checksum: true
      # 2025-10-26: a hot cache saves only around 15 seconds, this is not worthwhile at present
      #- uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
      - run: mkdir -p target/coverage
      - name: Run shader tests with coverage analysis
        run:
          # See note in scripts/coverage for why --no-cfg-coverage is necessary.
          # Note that we do NOT run +nightly here, as we installed an explicit nightly version above.
          cargo llvm-cov -p shader -p shader_common -p shader_util --all-features --doctests --lcov --output-path lcov.info --no-cfg-coverage --locked
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: lcov.info
          path: lcov.info
      - name: Send result to codecov
        uses: codecov/codecov-action@fdcc8476540edceab3de004e990f80d881c6cc00 # v5.5.0
        with:
          #files: lcov.info # not needed, it autodetects
          #verbose: true # not needed
          name: lcov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
