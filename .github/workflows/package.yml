name: package

on:
  workflow_dispatch:

permissions: {}

env:
  CARGO_TERM_COLOR: always
  CLICOLOR_FORCE: 1
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  BROT3_RUST_VERSION: nightly-2025-06-30
  # BROT3_RUST_VERSION should match in package.yml and ci.yml

jobs:
  package:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux
            host: ubuntu-22.04
            deb: true
            tools: cargo-deb
            cache-key: deb
          ## AppImage is not stripped
          #- target: x86_64-unknown-linux
          #  host: ubuntu-22.04
          #  bundle: appimage
          #  # TODO: It's not stripped!
          #  tools: cargo-bundle
          #  cache-key: bundle
          ## OSX bundle is not codesigned
          # - target: x86_64-apple-darwin
          #   host: macos-13
          #   bundle: osx
          #   tools: cargo-bundle
          #   cache-key: bundle
          ## OSX bundle is not codesigned
          # - target: aarch64-apple-darwin
          #   host: macos-14
          #   bundle: osx
          #   tools: cargo-bundle
          #   cache-key: bundle
          ## bundle MSI just doesn't work
          #- target: x86_64-pc-windows-gnu
          #  host: windows-latest
          #  bundle: msi
          #  tools: cargo-bundle
          #  cache-key: bundle
          - target: aarch64-apple-darwin
            host: macos-14
            # macos-14 is arm64
            binary: osx-aarch64
          - target: x86_64-apple-darwin
            host: macos-13
            binary: osx-x86_64
            # intel github runners: macos-13; macos-14-large (not available on free tier); macos-15-intel.
            # macos-13 deprecates in late 2025.
            # May need to go to bundle with cross-compile.
          - target: x86_64-pc-windows-msvc
            host: windows-latest
            binary: windows
    runs-on: ${{ matrix.host }}
    env:
      Q_PACKAGE_ZIP: ${{ contains(matrix.target, 'windows') && 'all' || 'none' }}
      Q_PACKAGE_TAR: ${{ contains(matrix.target, 'windows') && 'none' || 'all' }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v5
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.BROT3_RUST_VERSION }}
          components: llvm-tools-preview,rust-src,rustc-dev
      - name: Set minimal profile (Windows only)
        if: matrix.host == 'windows-latest'
        run: rustup set profile minimal
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        # run cache before installing tools, as some are installed from source
        with:
          cache-on-failure: true
          key: ${{ matrix.cache-key }}
        # TODO make this conditional?
      - name: install packaging tools
        uses:
          taiki-e/install-action@33734a118689b0b418824fb78ea2bf18e970b43b # v2.50.4
          # this action is used in multiple places
        with:
          tool: ${{ matrix.tools }}
          checksum: true
        if: matrix.tools
      ######## deb
      - name: build
        if: matrix.deb
        run: cargo build --locked --release --no-default-features
      - name: build deb
        id: build_deb
        if: matrix.deb
        run: cargo xtask debian --no-build
        # this writes the output 'deb=<file>'
      - name: upload deb
        if: matrix.deb
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ format('brot3-deb-{0}', matrix.target) }}
          path: ${{ steps.build_deb.outputs.deb }}
      ######## bundle
      #- name: build bundle
      #  id: bundle
      #  if: matrix.bundle
      #  uses: mathiasvr/command-output@6309e0ee6ed594fd7f382bd826e138e0ba04dd63 # v2.0.0
      #  with:
      #    run: cargo bundle -b brot3 -p brot3-ui -f ${{ matrix.bundle }} -r --no-default-features
      #  env:
      #    CARGO_TERM_PROGRESS_WHEN: never
      #    #CARGO_TERM_QUIET: true
      #- name: upload bundle
      #  if: matrix.bundle
      #  uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      #  with:
      #    name: ${{ format('brot3-bundle-{0}', matrix.target) }}
      #    path: ${{ steps.bundle.outputs.stdout }}
      ######## binary package
      - name: build binary package
        uses: taiki-e/upload-rust-binary-action@3962470d6e7f1993108411bc3f75a135ec67fc8c # v1.27.0
        id: build-binary
        if: matrix.binary
        with:
          bin: brot3
          dry-run: true
          dry-run-intended: true
          ref: refs/tags/dry-run # silence a warning
          target: ${{ matrix.target }}
          include: "\
            README.md,LICENSE,CHANGELOG.md\
            "
          leading-dir: true
          locked: true
          archive: $bin-$target
          tar: ${{ env.Q_PACKAGE_TAR }}
          zip: ${{ env.Q_PACKAGE_ZIP }}
      - name: Upload binary package to CI result
        if: ${{ matrix.binary && ( success() || failure() ) }}
        # always try to do this if packaging, it allows the package to be checked
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: brot3-${{ matrix.binary }}
          path: ${{ steps.build-binary.outputs.archive }}.${{ env.Q_PACKAGE_ZIP == 'all' && 'zip' || 'tar.gz' }}
