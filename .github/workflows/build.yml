name: build

on:
  workflow_call:
    inputs:
      release:
        type: boolean
        default: false
        description: Build for all supported platforms. (If false, builds only the CI subset.)

permissions: {}

env:
  CARGO_TERM_COLOR: always
  CLICOLOR_FORCE: 1
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  BROT3_RUST_VERSION: nightly-2025-06-30
  # BROT3_RUST_VERSION should match the version in rust-toolchain.toml & across all workflows

jobs:
  shader:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      - name: Install Rust
        uses: dtolnay/rust-toolchain@6d653acede28d24f02e3cd41383119e8b1b35921 # 2025-09-17
        with:
          toolchain: ${{ env.BROT3_RUST_VERSION }}
          components: rustfmt,clippy
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        if: ${{ !inputs.release }}
        with:
          cache-workspace-crates: true
      - name: build shader
        run: cargo run -p shader_builder --locked --release
        # Continue on error as far as possible, to provide maximum useful information
      - name: clippy (shader)
        run: cargo clippy -p shader -p shader_util -p shader_common --locked --release
        if: ${{ !cancelled() }}
      - name: Upload SPIRV artifact
        uses: actions/upload-artifact@v4
        with:
          name: shader.spv
          path: target/spirv-builder/spirv-unknown-vulkan1.1/release/deps/shader.spv
        if: ${{ !cancelled() }}

  coverage:
    name: coverage (shader)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Set minimal profile # no fmt or clippy
        run: rustup set profile minimal
      - uses: actions/checkout@v5
      - name: Install Rust
        uses: dtolnay/rust-toolchain@6d653acede28d24f02e3cd41383119e8b1b35921 # 2025-09-17
        with:
          toolchain: ${{ env.BROT3_RUST_VERSION }}
          components: llvm-tools-preview
      - uses: taiki-e/install-action@33734a118689b0b418824fb78ea2bf18e970b43b # v2.50.4
        with:
          tool: cargo-llvm-cov
          checksum: true
      # 2025-10-26: a hot cache saves only around 15 seconds, this is not worthwhile at present
      #- uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
      #  if: ${{ !inputs.release }}
      - run: mkdir -p target/coverage
      - name: Run shader tests with coverage analysis
        run:
          # See note in scripts/coverage for why --no-cfg-coverage is necessary.
          # Note that we do NOT run +nightly here, as we installed an explicit nightly version above.
          cargo llvm-cov -p shader -p shader_common -p shader_util --all-features --doctests --lcov --output-path lcov.info --no-cfg-coverage --locked
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: lcov.info
          path: lcov.info
      - name: Send result to codecov
        uses: codecov/codecov-action@fdcc8476540edceab3de004e990f80d881c6cc00 # v5.5.0
        with:
          #files: lcov.info # not needed, it autodetects
          #verbose: true # not needed
          name: lcov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  deb: # THIS BUILD INCLUDES CLIPPY
    needs: shader
    runs-on: ubuntu-24.04
    env: # Downloaded artifact from an earlier job - set up by build_ui.yml
      BROT3_PREBUILT_SHADER: ${{ github.workspace }}/prebuilt-shader/shader.spv
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/ui_build_prep
        with:
          rust-components: clippy
          tools: cargo-deb
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        if: ${{ !inputs.release }}
      - name: build
        run: cargo build --locked --release --no-default-features -p brot3-ui
      - name: upload binary
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: brot3-bin-ubuntu-24.04
          path: target/release/brot3
      - name: deb
        id: build_deb
        run: cargo xtask debian --no-build
        # this writes the output 'deb=<file>'
      - name: upload deb
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: brot3-deb-ubuntu-24.04
          path: ${{ steps.build_deb.outputs.deb }}
      # - name: coverage (ui) # To do later, if we add any
      - name: clippy (ui)
        run: cargo clippy -p brot3-ui --locked --release --no-default-features
        if: ${{ !cancelled() }}

  mac:
    needs: shader
    strategy:
      matrix:
        host: [macos-15, macos-15-intel]
    runs-on: ${{ matrix.host }}
    if: inputs.release
    env: # Downloaded artifact from an earlier job
      BROT3_PREBUILT_SHADER: ${{ github.workspace }}/prebuilt-shader/shader.spv
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/ui_build_prep
        with:
          tools: cargo-bundle
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        if: ${{ !inputs.release }}
      - name: build
        uses: mathiasvr/command-output@6309e0ee6ed594fd7f382bd826e138e0ba04dd63 # v2.0.0
        with:
          run: cargo bundle -b brot3 -p brot3-ui -f osx -r --no-default-features
        env:
          CARGO_TERM_PROGRESS_WHEN: never
      # SOMEDAY: codesign could go here
      #   e.g. codesign --timestamp --verify -vvv --deep --options=runtime --sign $IDENT $APPDIR
      - name: prepare app
        id: app
        env:
          BUNDLE_DIR: target/release/bundle/osx
          ADIR: brot3-mac
          ZIP: ${{ format('brot3-mac-{0}', runner.arch) }}.zip
        run: |
          mkdir -p $ADIR
          cp -r target/release/bundle/osx/brot3.app $ADIR/
          cp README.md CHANGELOG.md LICENSE $ADIR/
          zip -r $ZIP $ADIR
          echo "zipfile=$ZIP" >> $GITHUB_OUTPUT
      - name: upload result
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ format('brot3-mac-{0}', runner.arch) }}
          path: ${{ steps.app.outputs.zipfile }}

  # SOMEDAY: Linux AppImage build? (by cargo-bundle) (N.B. the result is not stripped by default)

  win:
    needs: shader
    runs-on: windows-2025
    if: inputs.release
    env: # Downloaded artifact from an earlier job
      BROT3_PREBUILT_SHADER: ${{ github.workspace }}/prebuilt-shader/shader.spv
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/ui_build_prep
      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        if: ${{ !inputs.release }}
      - name: build binary package
        uses: taiki-e/upload-rust-binary-action@3962470d6e7f1993108411bc3f75a135ec67fc8c # v1.27.0
        id: build-binary
        with:
          bin: brot3
          dry-run: true
          dry-run-intended: true
          ref: refs/tags/dry-run # silence a warning
          include: "\
            README.md,LICENSE,CHANGELOG.md\
            "
          leading-dir: true
          locked: true
          no-default-features: true
          archive: $bin-windows
      - name: Upload binary package to CI result
        if: ${{ success() || failure() }}
        # always try to do this if packaging, it allows the package to be checked
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: brot3-windows
          path: ${{ steps.build-binary.outputs.archive }}.zip
