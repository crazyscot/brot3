// Copyright © SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: MIT

import { Slider, Button, VerticalBox, HorizontalBox } from "std-widgets.slint";
import { InfoDisplayData, InfoDisplay } from "info.slint";
import { Menu, MenuItem } from "menu.slint";
import { AboutBox, BuildInfo } from "about.slint";

export struct Tile { x: length, y: length, tile: image}

export component MainUI inherits Window {
    // Window sizing callback. This returns a dummy invisible image but triggers the logic to reconsider the visible tiles.
    pure callback resized(length, length) -> image;
    min-height: 500px;
    min-width: 500px;

    out property <length> visible_width <=> fli.width;
    out property <length> visible_height <=> fli.height;

    default-font-family: "Inter";

    // FRACTAL VIEWPORT ==========================================================================

    callback flicked(length, length);
    callback zoom-changed(float);
    callback zoom-in(length, length);
    callback zoom-out(length, length);
    callback resegment-clicked();

    in-out property <float> zoom <=> sli.value;
    in property <float> minimum-zoom <=> sli.minimum;

    in property <[Tile]> tiles;

    in property <string> window-title <=> self.title;

    out property <length> viewport-x <=> fli.viewport-x;
    out property <length> viewport-y <=> fli.viewport-y;


    // ox,oy: Viewport offsets within the visible segment (these are usually negative?)
    // width, height: viewport size
    public function set_viewport(ox: length, oy: length, width: length, height: length) {
        fli.viewport-x = ox;
        fli.viewport-y = oy;
        fli.viewport-width = width;
        fli.viewport-height = height;
    }

    layout := VerticalLayout {
        fli := Flickable {
            for t in tiles: Image {
                x: t.x;
                y: t.y;
                source: t.tile;
            }
            flicked => {
                root.flicked(fli.viewport-x, fli.viewport-y);
            }
            TouchArea {
                scroll-event(e) => {
                    if e.delta-y > 0 {
                        root.zoom-in(self.mouse-x + fli.viewport-x, self.mouse-y + fli.viewport-y);
                        return accept;
                    } else if e.delta-y < 0 {
                        root.zoom-out(self.mouse-x + fli.viewport-x, self.mouse-y + fli.viewport-y);
                        return accept;
                    }
                    return reject;
                }
            }
        }

        HorizontalLayout {
            sli := Slider {
                minimum: 1; // initial value (UI_MIN_ZOOM_LEVEL); may be updated dynamically
                maximum: 45; // !!! Must match UI_MAX_ZOOM_LEVEL
                released => {
                    zoom-changed(self.value);
                }
            }
        }
    }

    // Background for the fractal area
    Rectangle {
        z: -1;
        height: fli.height;
        width: fli.width;
        x: layout.x + fli.x;
        y: layout.y + fli.y;
        background: @linear-gradient(0deg, #777777 0%, #cccccc 100%);
    }

    /*
    btn := Button { // TECHDEBT This was put in for testing resegmentation; should be made automatic.
        x: 0;
        y: fli.y + (fli.height) - (self.height) - 3px;
        text: "Resegment";
        clicked => {
            root.resegment-clicked();
        }
    }
    */

    // INFO DISPLAY (HUD) ========================================================================

    in property <InfoDisplayData> info_data;
    in property <bool> info_visible <=> hud.visible;

    in-out property <string> fractal-selection <=> hud.fractal-selection;
    in property <[string]> fractals-available <=> hud.fractals-available;
    callback fractal-selected(string);

    in-out property <string> colourer-selection <=> hud.colourer-selection;
    in property <[string]> colourers-available <=> hud.colourers-available;
    callback colourer-selected(string);

    hud := InfoDisplay {
        data <=> info_data;
        // Position over the top of the fractal viewport
        x: 0;
        y: 0;
        fractal-selected(s) => {
            root.fractal-selected(s)
        }
        colourer-selected(s) => {
            root.colourer-selected(s)
        }
    }

    dummy_img := Image {
        source: resized(root.width, root.height);
    }

    // MENU ======================================================================================

    private property <bool> menu-open: false;
    menu_btn := Button {
        x: 5px;
        y: 5px + (hud.visible ? hud.height : 0px);
        z: 5;
        text: "☰";
        primary: true;
        colorize-icon: true;
        clicked => {
            menu.show();
            root.menu-open = !root.menu-open;
        }
    }
    callback menu-selected(string);
    menu := Menu {
        x: 20px;
        y: menu_btn.y + 20px;
        z: 6;
        font-family: "Inter";
        selected(what) => { root.menu-selected(what); }

        items: [
            { display: "About" },
            { display: "Show/Hide Info", callback: "toggle-info" },
        ];
    }

    // ABOUT BOX =================================================================================

    in property <BuildInfo> build-info;

    public function about_box() {
        about.show();
    }
    about := AboutBox {
        height: 400px;
        width: 400px;
        x: (root.width - self.width) /2;
        y: (root.height - self.height) /2;
        info <=> root.build-info;
    }
}
