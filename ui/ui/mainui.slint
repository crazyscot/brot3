// Copyright © SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: MIT

import { Slider, Button, VerticalBox, HorizontalBox } from "std-widgets.slint";
export struct Tile { x: length, y: length, tile: image}

export component MainUI inherits Window {
    callback flicked(length, length);
    callback zoom-changed(float);
    callback zoom-in(length, length);
    callback zoom-out(length, length);
    callback resegment-clicked();
    min-height: 500px;
    min-width: 500px;

    out property <length> visible_width: fli.width;
    out property <length> visible_height: fli.height;

    in-out property <float> zoom <=> sli.value;

    in property <[Tile]> tiles;

    in property <string> window-title <=> self.title;

    // ox,oy: Viewport offsets within the visible segment (these are usually negative?)
    // width, height: viewport size
    public function set_viewport(ox: length, oy: length, width: length, height: length) {
        fli.viewport-x = ox;
        fli.viewport-y = oy;
        fli.viewport-width = width;
        fli.viewport-height = height;
    }

    VerticalLayout {
        fli := Flickable {
            for t in tiles: Image {
                x: t.x;
                y: t.y;
                source: t.tile;
            }
            flicked => {
                root.flicked(fli.viewport-x, fli.viewport-y);
            }
            TouchArea {
                scroll-event(e) => {
                    if e.delta-y > 0 {
                        root.zoom-in(self.mouse-x + fli.viewport-x, self.mouse-y + fli.viewport-y);
                        return accept;
                    } else if e.delta-y < 0 {
                        root.zoom-out(self.mouse-x + fli.viewport-x, self.mouse-y + fli.viewport-y);
                        return accept;
                    }
                    return reject;
                }
            }
        }

        HorizontalLayout {
            sli := Slider {
                minimum: 1;
                maximum: 45; // !!! Must match UI_MAX_ZOOM_LEVEL
                released => {
                    zoom-changed(self.value);
                }
            }
        }
    }

    /*
    btn := Button { // TECHDEBT This was put in for testing resegmentation; should be made automatic.
        x: 0;
        y: fli.y + (fli.height) - (self.height) - 3px;
        text: "Resegment";
        clicked => {
            root.resegment-clicked();
        }
    }
    */

    // HUD display data
    // XXX refactor - rename
    in property <string> algorithm;
    in property <string> colourer;
    in property <int> max_iter;
    in property <string> origin;
    in property <string> axes;
    in property <string> zoom_readout;

    Rectangle {
        property <string> text_font: "Inter";
        property <length> main_size: 18px;
        property <length> legend_size: main_size * 0.7;
        property <int> text_weight: 700;
        property <brush> data_colour: white;
        property <brush> legend_colour: #aaa;

        info := GridLayout {
            Row {
                HorizontalLayout {
                    alignment: LayoutAlignment.start;
                    padding-left: main_size * 0.25;
                    padding-top: main_size * 0.25;
                    Text {
                        text: "algorithm: ";
                        font-family: text_font; font-size: legend_size; font-weight: text_weight; color: legend_colour;
                        vertical-alignment: TextVerticalAlignment.center;
                    }
                    Text {
                        text: algorithm;
                        font-family: text_font; font-size: main_size; font-weight: text_weight; color: data_colour; 
                        vertical-alignment: TextVerticalAlignment.center;
                    }
                }
                HorizontalLayout { 
                    alignment: LayoutAlignment.start;
                    padding-top: main_size * 0.25;
                    Text {
                        text: "max_iter: ";
                        font-family: text_font; font-size: legend_size; font-weight: text_weight; color: legend_colour;
                        vertical-alignment: TextVerticalAlignment.center;
                    }
                    Text {
                        text: max_iter;
                        font-family: text_font; font-size: main_size; font-weight: text_weight; color: data_colour;
                        vertical-alignment: TextVerticalAlignment.center;
                    }
                }
            }
            Row {
                HorizontalLayout { 
                    alignment: LayoutAlignment.start;
                    padding-left: main_size * 0.25;
                    Text {
                        text: "colourer: ";
                        font-family: text_font; font-size: legend_size; font-weight: text_weight; color: legend_colour;
                        vertical-alignment: TextVerticalAlignment.center;
                    }
                    Text { 
                        text: colourer; 
                        font-family: text_font; font-size: main_size; font-weight: text_weight; color: data_colour;
                        vertical-alignment: TextVerticalAlignment.bottom;
                    }
                }
            }
            Row {
                HorizontalLayout { 
                    colspan: 2;
                    alignment: LayoutAlignment.start;
                    padding-left: main_size * 0.25;
                    Text {
                        text: "origin: ";
                        font-family: text_font; font-size: legend_size; font-weight: text_weight; color: legend_colour;
                        vertical-alignment: TextVerticalAlignment.center;
                    }
                    Text {
                        text: origin;
                        font-family: text_font; font-size: main_size; font-weight: text_weight; color: data_colour;
                        vertical-alignment: TextVerticalAlignment.bottom;
                    }
                }
            }
            Row {
                HorizontalLayout {
                    alignment: LayoutAlignment.start;
                    padding-left: main_size * 0.25;
                    padding-bottom: main_size * 0.25;
                    Text {
                        text: "axes: ";
                        font-family: text_font; font-size: legend_size; font-weight: text_weight; color: legend_colour;
                        vertical-alignment: TextVerticalAlignment.center;
                    }
                    Text {
                        text: axes;
                        font-family: text_font; font-size: main_size; font-weight: text_weight; color: data_colour;
                        vertical-alignment: TextVerticalAlignment.bottom;
                    }
                }
                HorizontalLayout { 
                    alignment: LayoutAlignment.start;
                    padding-bottom: main_size * 0.25;
                    Text {
                        text: "zoom: ";
                        font-family: text_font; font-size: legend_size; font-weight: text_weight; color: legend_colour;
                        vertical-alignment: TextVerticalAlignment.center;
                    }
                    Text {
                        text: zoom_readout + " ×";
                        font-family: text_font; font-size: main_size; font-weight: text_weight; color: data_colour;
                        vertical-alignment: TextVerticalAlignment.bottom;
                    }
                }
            }
            // XXX refactor out to sidecar slint file

            width: main_size * 30;
            min-width: 500px;
            height: main_size * 5.5;
            x: 0;
            y: fli.y + (fli.height) - (self.height);
            z: 10.0;
        }

        Rectangle {
            width <=> info.width;
            height <=> info.height;
            x <=> info.x;
            y <=> info.y;
            z: 1.0;
            background: #111;
            opacity: 0.6;
        }
    }
}

