// Fractal info display
// (c) 2024 Ross Younger

import "./assets/Inter_18pt-Bold.ttf";

import { ComboBox, ComboBoxItem, MagicText } from "@vivi/magic.slint";
import { TextBase, TextStyle } from "@vivi/foundation.slint";
import { GridBox } from "std-widgets.slint";

export struct InfoDisplayData {
    algorithm: string,
    colourer: string,
    max_iter: int,
    origin: string,
    centre: string,
    axes: string,
    zoom_mantissa: string,
    zoom_exponent10: int,
}

export component InfoData inherits TextBase {
    color: #fff;
    font-family: "Inter";
    style: {
        font-size: 16px,
        font-weight: 700
    };
    horizontal-alignment: TextHorizontalAlignment.left;
    vertical-alignment: TextVerticalAlignment.center;
    horizontal-stretch: 0;
}

export component InfoLegend inherits TextBase {
    color: #aaa;
    font-family: "Inter";
    style: {
        font-size: 12px,
        font-weight: 700
    };
    horizontal-alignment: TextHorizontalAlignment.right;
    vertical-alignment: TextVerticalAlignment.center;
    horizontal-stretch: 0;
}

export component InfoDisplay inherits Rectangle {
    // Data to display
    in property <InfoDisplayData> data;
    // N.B. Caller should set x and y

    // Fractal selection
    out property <ComboBoxItem> fractal-selection <=> fractal-cb.current-value;
    in-out property <int> fractal-index <=> fractal-cb.current-index;
    in property<[ComboBoxItem]> fractals-available <=> fractal-cb.model; // Set by caller
    callback fractal-selected(string);

    // Colourer selection
    out property <ComboBoxItem> colourer-selection <=> colourer-cb.current-value;
    in-out property <int> colourer-index <=> colourer-cb.current-index;
    in property<[ComboBoxItem]> colourers-available <=> colourer-cb.model; // Set by caller
    callback colourer-selected(string);

    // Styling. These might become tweakable user preferences later.
    private property <length> main_size: 18px;
    private property <length> superscript_size: main_size * 0.5;

    // Caller should set x and y
    height: info.preferred-height;
    width: info.preferred-width;

    info := GridBox {
        x: 0;
        z: 10.0;

        // COLUMN PLAN:
        // 1,2: First legend and data
        //      (long data may colspan 5)
        // 3: Spacer
        // 4,5: Second legend and data
        // 6: Filler that stretches

        // Right hand side filler
        Rectangle {
            col: 6;
            rowspan: 10;
            min-width: 10px;
            height: 50px;
            horizontal-stretch: 1;
        }

        Row {
            InfoLegend {
                text: "algorithm: ";
            }
            fractal_cb := ComboBox {
                horizontal-stretch: 0;
                selected => {
                    root.fractal-selected(self.current-value.text)
                }
            }
            Rectangle {} // spacer
            InfoLegend {
                text: "max_iter: ";
            }
            InfoData {
                text: data.max_iter;
            }
        }
        Row {
            InfoLegend {
                text: "colourer: ";
            }
            colourer-cb := ComboBox {
                horizontal-stretch: 0;
                selected => {
                    root.colourer-selected(self.current-value.text)
                }
            }
        }
        Row {
            InfoLegend {
                text: "origin: ";
            }
            InfoData {
                colspan: 5;
                text: data.origin;
            }
        }

        Row {
            InfoLegend {
                text: "centre: ";
            }
            InfoData {
                colspan: 5;
                text: data.centre;
            }
        }

        Row {
            InfoLegend {
                text: "axes: ";
            }
            InfoData {
                text: data.axes;
            }
            Rectangle {} // spacer
            InfoLegend {
                text: "zoom: ";
            }
            HorizontalLayout {
                horizontal-stretch: 0;
                InfoData {
                    text: data.zoom_mantissa;
                }
                HorizontalLayout {
                    horizontal-stretch: 0;
                    visible: data.zoom-exponent10 != 0;
                    InfoData {
                        text: " Ã— 10";
                    }
                    InfoData {
                        text: data.zoom-exponent10;
                        // superscript!
                        font-size: superscript_size;
                        vertical-alignment: TextVerticalAlignment.top;
                    }
                }
            }
        }
    }

    // Background for the info area
    Rectangle {
        width <=> info.width;
        height <=> info.height;
        x <=> info.x;
        y <=> info.y;
        z: 1.0;
        background: #111;
        opacity: 0.6;
    }
}