// Fractal info display
// (c) 2024 Ross Younger

import "./assets/Inter_18pt-Bold.ttf";

export struct InfoDisplayData {
    algorithm: string,
    colourer: string,
    max_iter: int,
    origin: string,
    centre: string,
    axes: string,
    zoom_mantissa: string,
    zoom_exponent10: int,
}

export component InfoDisplay inherits Rectangle {
    // Data to display
    in property <InfoDisplayData> data;
    // N.B. Caller should set x and y

    // Styling. These might become tweakable user preferences later.
    private property <length> main_size: 18px;
    private property <length> legend_size: main_size * 0.7;
    private property <int> text_weight: 700;
    private property <brush> data_colour: white;
    private property <brush> legend_colour: #aaa;
    private property <brush> bg_colour: #111;
    private property <float> bg_opacity: 0.6;

    height: info.height;
    width: info.width;

    info := GridLayout {
        // Caller should set x and y

        width: main_size * 30;
        min-width: 500px;
        height: main_size * 6.5;
        z: 10.0;

        // there is probably a less repetitititive way to do this ...
        Row {
            HorizontalLayout {
                alignment: LayoutAlignment.start;
                padding-left: main_size * 0.25;
                padding-top: main_size * 0.25;
                Text {
                    text: "algorithm: ";
                    font-size: legend_size; font-weight: text_weight; color: legend_colour;
                    vertical-alignment: TextVerticalAlignment.center;
                }
                Text {
                    text: data.algorithm;
                    font-size: main_size; font-weight: text_weight; color: data_colour;
                    vertical-alignment: TextVerticalAlignment.center;
                }
            }
            HorizontalLayout {
                alignment: LayoutAlignment.start;
                padding-top: main_size * 0.25;
                Text {
                    text: "max_iter: ";
                    font-size: legend_size; font-weight: text_weight; color: legend_colour;
                    vertical-alignment: TextVerticalAlignment.center;
                }
                Text {
                    text: data.max_iter;
                    font-size: main_size; font-weight: text_weight; color: data_colour;
                    vertical-alignment: TextVerticalAlignment.center;
                }
            }
        }
        Row {
            HorizontalLayout {
                alignment: LayoutAlignment.start;
                padding-left: main_size * 0.25;
                Text {
                    text: "colourer: ";
                    font-size: legend_size; font-weight: text_weight; color: legend_colour;
                    vertical-alignment: TextVerticalAlignment.center;
                }
                Text {
                    text: data.colourer;
                    font-size: main_size; font-weight: text_weight; color: data_colour;
                    vertical-alignment: TextVerticalAlignment.bottom;
                }
            }
        }
        Row {
            HorizontalLayout {
                colspan: 2;
                alignment: LayoutAlignment.start;
                padding-left: main_size * 0.25;
                Text {
                    text: "origin: ";
                    font-size: legend_size; font-weight: text_weight; color: legend_colour;
                    vertical-alignment: TextVerticalAlignment.center;
                }
                Text {
                    text: data.origin;
                    font-size: main_size; font-weight: text_weight; color: data_colour;
                    vertical-alignment: TextVerticalAlignment.bottom;
                }
            }
        }

        Row {
            HorizontalLayout {
                colspan: 2;
                alignment: LayoutAlignment.start;
                padding-left: main_size * 0.25;
                Text {
                    text: "centre: ";
                    font-size: legend_size; font-weight: text_weight; color: legend_colour;
                    vertical-alignment: TextVerticalAlignment.center;
                }
                Text {
                    text: data.centre;
                    font-size: main_size; font-weight: text_weight; color: data_colour;
                    vertical-alignment: TextVerticalAlignment.bottom;
                }
            }
        }

        Row {
            HorizontalLayout {
                alignment: LayoutAlignment.start;
                padding-left: main_size * 0.25;
                padding-bottom: main_size * 0.25;
                Text {
                    text: "axes: ";
                    font-size: legend_size; font-weight: text_weight; color: legend_colour;
                    vertical-alignment: TextVerticalAlignment.center;
                }
                Text {
                    text: data.axes;
                    font-size: main_size; font-weight: text_weight; color: data_colour;
                    vertical-alignment: TextVerticalAlignment.bottom;
                }
            }
            HorizontalLayout {
                alignment: LayoutAlignment.start;
                padding-bottom: main_size * 0.25;
                Text {
                    text: "zoom: ";
                    font-size: legend_size; font-weight: text_weight; color: legend_colour;
                    vertical-alignment: TextVerticalAlignment.center;
                }
                Text {
                    text: data.zoom_mantissa;
                    font-size: main_size; font-weight: text_weight; color: data_colour;
                    vertical-alignment: TextVerticalAlignment.bottom;
                }
                HorizontalLayout {
                    visible: data.zoom-exponent10 != 0;
                    Text {
                        text: " Ã—";
                        font-size: main_size; font-weight: text_weight; color: data_colour;
                        vertical-alignment: TextVerticalAlignment.bottom;
                    }
                    Text {
                        text: "10";
                        font-size: main_size; font-weight: text_weight; color: data_colour;
                        vertical-alignment: TextVerticalAlignment.bottom;
                    }
                    Text {
                        text: data.zoom-exponent10;
                        font-size: legend_size; font-weight: text_weight; color: data_colour;
                        vertical-alignment: TextVerticalAlignment.top;
                    }
                }
            }
        }

    }

    // Background for the info area
    Rectangle {
        width <=> info.width;
        height <=> info.height;
        x <=> info.x;
        y <=> info.y;
        z: 1.0;
        background: bg_colour;
        opacity: bg_opacity;
    }
}