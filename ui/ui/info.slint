// Fractal info display
// (c) 2024 Ross Younger

import "./assets/Inter_18pt-Bold.ttf";

import { ComboBox, ComboBoxItem, MagicText } from "@vivi/magic.slint";
import { TextBase, TextStyle } from "@vivi/foundation.slint";

export struct InfoDisplayData {
    algorithm: string,
    colourer: string,
    max_iter: int,
    origin: string,
    centre: string,
    axes: string,
    zoom_mantissa: string,
    zoom_exponent10: int,
}

export component InfoData inherits TextBase {
    color: #fff;
    font-family: "Inter";
    style: {
        font-size: 18px,
        font-weight: 700
    };
    vertical-alignment: TextVerticalAlignment.center;
}

export component InfoLegend inherits TextBase {
    color: #aaa;
    font-family: "Inter";
    style: {
        font-size: 12px,
        font-weight: 700
    };
    vertical-alignment: TextVerticalAlignment.center;
}

export component InfoDisplay inherits Rectangle {
    // Data to display
    in property <InfoDisplayData> data;
    // N.B. Caller should set x and y

    // Fractal selection
    out property <ComboBoxItem> fractal-selection <=> fractal-cb.current-value;
    in-out property <int> fractal-index <=> fractal-cb.current-index;
    in property<[ComboBoxItem]> fractals-available <=> fractal-cb.model; // Set by caller
    callback fractal-selected(string);

    // Colourer selection
    out property <ComboBoxItem> colourer-selection <=> colourer-cb.current-value;
    in-out property <int> colourer-index <=> colourer-cb.current-index;
    in property<[ComboBoxItem]> colourers-available <=> colourer-cb.model; // Set by caller
    callback colourer-selected(string);

    // Styling. These might become tweakable user preferences later.
    private property <length> main_size: 18px;
    private property <length> superscript_size: main_size * 0.5;

    height: info.height;
    width: info.width;

    info := GridLayout {
        // Caller should set x and y

        width: 18px * 30;
        min-width: 500px;
        height: 18px * 7.5;
        z: 10.0;

        Row {
            HorizontalLayout {
                alignment: LayoutAlignment.start;
                padding-left: main_size * 0.25;
                padding-top: main_size * 0.25;
                InfoLegend {
                    text: "algorithm: ";
                }
                fractal_cb := ComboBox {
                    selected => {
                        root.fractal-selected(self.current-value.text)
                    }
                }
            }
            HorizontalLayout {
                alignment: LayoutAlignment.start;
                padding-top: main_size * 0.25;
                InfoLegend {
                    text: "max_iter: ";
                }
                InfoData {
                    text: data.max_iter;
                }
            }
        }
        Row {
            HorizontalLayout {
                alignment: LayoutAlignment.start;
                padding-left: main_size * 0.25;
                InfoLegend {
                    text: "colourer: ";
                }
                colourer-cb := ComboBox {
                    selected => {
                        root.colourer-selected(self.current-value.text)
                    }
                }
            }
        }
        Row {
            HorizontalLayout {
                colspan: 2;
                alignment: LayoutAlignment.start;
                padding-left: main_size * 0.25;
                InfoLegend {
                    text: "origin: ";
                }
                InfoData {
                    text: data.origin;
                }
            }
        }

        Row {
            HorizontalLayout {
                colspan: 2;
                alignment: LayoutAlignment.start;
                padding-left: main_size * 0.25;
                InfoLegend {
                    text: "centre: ";
                }
                InfoData {
                    text: data.centre;
                }
            }
        }

        Row {
            HorizontalLayout {
                alignment: LayoutAlignment.start;
                padding-left: main_size * 0.25;
                padding-bottom: main_size * 0.25;
                InfoLegend {
                    text: "axes: ";
                }
                InfoData {
                    text: data.axes;
                }
            }
            HorizontalLayout {
                alignment: LayoutAlignment.start;
                padding-bottom: main_size * 0.25;
                InfoLegend {
                    text: "zoom: ";
                }
                InfoData {
                    text: data.zoom_mantissa;
                }
                HorizontalLayout {
                    visible: data.zoom-exponent10 != 0;
                    InfoData {
                        text: " Ã— 10";
                    }
                    InfoData {
                        text: data.zoom-exponent10;
                        // superscript!
                        font-size: superscript_size;
                        vertical-alignment: TextVerticalAlignment.top;
                    }
                }
            }
        }

    }

    // Background for the info area
    Rectangle {
        width <=> info.width;
        height <=> info.height;
        x <=> info.x;
        y <=> info.y;
        z: 1.0;
        background: #111;
        opacity: 0.6;
    }
}